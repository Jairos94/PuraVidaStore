# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - 'master'  # Solo ejecuta el pipeline cuando haya un cambio en la rama "master"

pool:
  name: 'localPoolJrivera'  # Asegúrate de que tu agente local esté configurado correctamente

variables:
  solution: '**/*.sln'  # Ruta de la solución, ajusta según tu estructura
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  outputFolder: 'C:\publish\puraVida'  # Ruta de salida en tu máquina local

steps:
# Paso 1: Instalar la herramienta .NET 7 (asegúrate de tener .NET SDK 7 en tu máquina local)
- task: UseDotNet@2
  displayName: 'Instalar .NET SDK 7'  # Nombre personalizado
  inputs:
    packageType: 'sdk'
    version: '7.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Paso 2: Restaurar los paquetes NuGet
- task: DotNetCoreCLI@2
  displayName: 'Restaurar dependencias NuGet'  # Nombre personalizado
  inputs:
    command: 'restore'
    projects: '$(solution)'

# Paso 3: Compilar el proyecto en la carpeta de salida personalizada
- task: DotNetCoreCLI@2
  displayName: 'Compilar proyecto'  # Nombre personalizado
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

# Paso 4: Ejecutar pruebas (si tienes proyectos de prueba)
- task: DotNetCoreCLI@2
  displayName: 'Ejecutar pruebas'  # Nombre personalizado
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

# Paso 5: Publicar el proyecto en la carpeta de salida personalizada
- task: DotNetCoreCLI@2
  displayName: 'Publicar proyecto'  # Nombre personalizado
  inputs:
    command: 'publish'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --output $(outputFolder)\publish_output'

